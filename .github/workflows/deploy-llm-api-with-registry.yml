name: Deploy LLM API with Registry Push

on:
  push:
    branches: [ main ]
    paths:
      - 'llm-api/**'
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: [self-hosted]
    # If you labeled your Windows runner, you can be explicit:
    # runs-on: [self-hosted, Windows]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up environment
      shell: powershell 
      run: |
        $timestamp = Get-Date -Format 'yyyyMMdd-HHmmss'
        $shortSha  = git rev-parse --short HEAD
        Add-Content -Path $env:GITHUB_ENV -Value "TIMESTAMP=$timestamp"
        Add-Content -Path $env:GITHUB_ENV -Value "SHORT_SHA=$shortSha"

    - name: Stop existing container
      working-directory: llm-api
      shell: cmd
      run: |
        docker compose down || echo No existing container to stop
      continue-on-error: true

    - name: Build Docker image
      working-directory: llm-api
      shell: cmd
      run: |
        docker build -t mgc0216/pirate-api:latest -t mgc0216/pirate-api:${{ env.SHORT_SHA }} .

    - name: Login to Docker Hub
      if: github.event_name == 'push'
      shell: cmd
      run: echo ${{ secrets.DOCKER_HUB_TOKEN }} | docker login -u mgc0216 --password-stdin

    - name: Push to Docker Hub
      if: github.event_name == 'push'
      shell: cmd
      run: |
        docker push mgc0216/pirate-api:latest
        docker push mgc0216/pirate-api:${{ env.SHORT_SHA }}

    - name: Start new container
      working-directory: llm-api
      shell: cmd
      run: |
        docker compose up -d

    - name: Wait for service to be ready
      shell: cmd
      run: |
        echo Waiting for service to start...
        for /l %%i in (1,1,30) do (
          curl --fail http://localhost:8080/health && goto :success
          echo Attempt %%i failed, waiting...
          timeout /t 2 /nobreak > nul
        )
        echo Service failed to start within 60 seconds
        exit /b 1
        :success
        echo Service is ready!

    - name: Verify deployment
      shell: cmd
      run: |
        echo === Container Status ===
        docker ps
        echo.
        echo === Service Health ===
        curl -s http://localhost:8080/health | python -m json.tool || echo Health check failed
        echo.
        echo === Recent Logs ===
        docker compose -f llm-api\docker-compose.yml logs --tail=10

    - name: Cleanup old images
      shell: cmd
      run: |
        echo Cleaning up old images...
        docker image prune -f
      continue-on-error: true

    - name: Notify deployment status
      if: always()
      shell: cmd
      run: |
        if %ERRORLEVEL% EQU 0 (
          echo ✅ Deployment successful - LLM API is running on Windows
        ) else (
          echo ❌ Deployment failed - Check logs above
        )
